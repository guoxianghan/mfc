<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <configSections>
        <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net"/>
        <section name="oracle.manageddataaccess.client" type="OracleInternal.Common.ODPMSectionHandler, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342"/>
    </configSections>
    <!--appSettings>
        <add key="log4net.Internal.Debug" value=""/>
    </appSettings-->
    <runtime>
        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

            <!-- The next entry defines where the CLR will look for additional .DLLs... 
                 Note: This works only for directories which are within the current
                       directory or lower. You cannot use parent directories.
            -->
            <probing privatePath=".\External Assemblies\"/>

            <!-- Example: Uncomment the following property "qualifyAssembly" in order to only load the specified
                 DLL (fully qualified version) only -->
            <!--
            <qualifyAssembly partialName="Oracle.DataAccess"
                             fullName="Oracle.DataAccess,Version=2.111.6.20,Culture=neutral,PublicKeyToken=89b483f429c47342"/>
            -->
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.CodeAnalysis.Scripting" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-1.1.0.0" newVersion="1.1.0.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.CodeAnalysis" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-1.1.0.0" newVersion="1.1.0.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.CodeAnalysis.CSharp.Scripting" publicKeyToken="31bf3856ad364e35" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-1.1.0.0" newVersion="1.1.0.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <publisherPolicy apply="no"/>
                <assemblyIdentity name="Oracle.ManagedDataAccess" publicKeyToken="89b483f429c47342" culture="neutral"/>
                <bindingRedirect oldVersion="4.121.0.0 - 4.65535.65535.65535" newVersion="4.121.2.0"/>
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral"/>
                <bindingRedirect oldVersion="0.0.0.0-8.0.0.0" newVersion="8.0.0.0"/>
            </dependentAssembly>
        </assemblyBinding>
    </runtime>

    <!--system.diagnostics>
        <trace autoflush="true">
            <listeners>
                <add
                    name="textWriterTraceListener"
                    type="System.Diagnostics.TextWriterTraceListener"
                    initializeData="d:\temp\log4net.txt" />
            </listeners>
        </trace>
    </system.diagnostics-->

    <!-- Uncomment the next paragraph for additional WCF debugging ...
         It will write a logfile to "d:\Traces.svclog" which can easily be read
         in and interpreted using the Microsoft Windows SDK Tool
         "Service Trace Viewer" which is part of VS 2010. ->

    <system.diagnostics>
        <sources>
            <source name="System.ServiceModel"
                    switchValue="Information, ActivityTracing"
                    propagateActivity="true">
                <listeners>
                    <add name="traceListener"
                        type="System.Diagnostics.XmlWriterTraceListener"
                        initializeData= "d:\Traces.svclog" />
                </listeners>
            </source>
        </sources>
    </system.diagnostics>

    <system.serviceModel>
        <diagnostics>
            <messageLogging
                 logEntireMessage="true"
                 logMalformedMessages="false"
                 logMessagesAtServiceLevel="true"
                 logMessagesAtTransportLevel="false"
                 maxMessagesToLog="3000"
                 maxSizeOfMessageToLog="2000"/>
        </diagnostics>
    </system.serviceModel>

    <!- End of additional WCF debugging  -->


    <!-- Uncomment the next paragraph for additional TCP/IP debugging... ->

    <system.diagnostics>
        <sources>
            <source name="System.Net" tracemode="includehex" maxdatasize="1024">
                <listeners>
                    <add name="System.Net"/>
                </listeners>
            </source>
            <source name="System.Net.Sockets">
                <listeners>
                    <add name="System.Net"/>
                </listeners>
            </source>
            <source name="System.Net.Cache">
                <listeners>
                    <add name="System.Net"/>
                </listeners>
            </source>
        </sources>
        <switches>
            <add name="System.Net" value="Verbose"/>
            <add name="System.Net.Sockets" value="Verbose"/>
            <add name="System.Net.Cache" value="Verbose"/>
        </switches>
        <sharedListeners>
            <add name="System.Net"
              type="System.Diagnostics.TextWriterTraceListener"
              initializeData="d:\network.log"/>
        </sharedListeners>
        <trace autoflush="true"/>
    </system.diagnostics>

    <!- End of additional TCP/IP debugging  -->

    <log4net>

        <!-- Log4Net File Research Service (FRS) rolling file appender configuration which will log everything
             coming in ... There is normally no need to change the parameters in this appender.  -->
        <appender name="AppenderForFRS" type="log4net.Appender.RollingFileAppender">

            <!-- The path to the file that logging will be written to.
                 If the path is relative it is taken as relative from the application base directory. -->
            <param name="File" value="..\Log\MFCLOG.LOG"/>

            <!-- The threshold Level of the appender.
                 All log events with lower level than the threshold level are ignored by the appender. 
                 Values:
                 Off   - The Off level designates a higher level than all the rest
                 Fatal - The Fatal level designates very severe error events that will presumably lead 
                         the application to abort
                 Error - The Error level designates error events that might still allow the application 
                         to continue running
                 Warn  - The Warn level designates potentially harmful situations
                 Info  - The Info level designates informational messages that highlight the progress 
                         of the application at coarse-grained level
                 Debug - The Debug level designates fine-grained informational events that are most 
                         useful to debug an application
                 All   - The All level designates the lowest level possible
                 It is also possible to implement additional log levels, for example the formerly 
                 mentioned CALLSTACK level -->
            <param name="Threshold" value="All"/>

            <!-- Indicates whether the file should be appended to or overwritten.
                 If the value is set to false then the file will be overwritten, if it is set to true 
                 then the file will be appended to.  -->
            <param name="AppendToFile" value="true"/>

            <!-- Style of rolling to use 
                 Values:
                 Once      - Roll files once per program execution
                 Size      - Roll files based only on the size of the file
                 Date      - Roll files based only on the date
                 Composite - Roll files based on both the size and date of the file  -->
            <rollingStyle value="Size"/>

            <!-- The maximum size that the output file is allowed to reach before being rolled 
                 over to backup files. 
                 This property allows you to specify the maximum size with the suffixes "KB", "MB" 
                 or "GB" so that the size is interpreted being expressed respectively in 
                 kilobytes, megabytes or gigabytes.
                 For example, the value "10KB" will be interpreted as 10240 bytes.
                 The default maximum file size is 10MB.
                 If you have the option to set the maximum file size programmatically consider 
                 using the MaxFileSize property instead as this allows you to set the size in 
                 bytes as a Int64. -->
            <maximumFileSize value="4MB"/>

            <!-- Indicates whether logging should always go to the same file.
                 By default file.log is always the current file. Optionally file.log.yyyy-mm-dd for 
                 current formatted datePattern can by the currently logging file (or 
                 file.log.curSizeRollBackup or even file.log.yyyy-mm-dd.curSizeRollBackup).
                 This will make time based rollovers with a large number of backups much faster as 
                 the appender it won't have to rename all the backups! -->
            <staticLogFileName value="true"/>

            <!-- The maximum number of backup files that are kept before the oldest is erased.
                 If set to zero, then there will be no backup files and the log file will be truncated 
                 when it reaches MaxFileSize.
                 If a negative number is supplied then no deletions will be made. Note that this could 
                 result in very slow performance as a large number of files are rolled over 
                 unless CountDirection is used.
                 The maximum applies to each time based group of files and not the total.  -->
            <maxSizeRollBackups value="200"/>

            <!-- Indicates if the current file is the lowest numbered file or the highest numbered file.
                 By default newer files have lower numbers (CountDirection < 0), 
                 i.e. log.1 is most recent, log.5 is the 5th backup, etc...
                 CountDirection >= 0 does the opposite i.e. log.1 is the first backup made, log.5 is the 5th backup made, 
                 etc. For infinite backups use CountDirection >= 0 to reduce rollover costs.  -->
            <countDirection value="-1"/>


            <!-- You should use the following locking model to ensure that FCA/Obelix does not try 
                 to move log files unless the appender is done writing to it.  -->
            <lockingModel type="log4net.Appender.FileAppender+ExclusiveLock"/>

            <!-- It ensures that in case an exception within the appender is thrown, 
                 the appender itself reconnects to the log4net framework and continues to log.  -->
            <reconnectonerror value="true"/>

            <!-- The output will be formatted using a PatternLayout 
                 For detailed information regarding Patternlayouts refer to 
                 http://logging.apache.org/log4net/release/sdk/log4net.Layout.PatternLayout.html -->

            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%date %logger %p [%4thread] [%property{Method} | %property{Line}] | %message%newline"/>
            </layout>

        </appender>


        <!-- Log4Net Udp Appender configuration
             Fast and slim logging information via UDP. In order to use this kind of logging,
             you have to install/use an application like "log2console", "netlogclient" or "log4view".

             Add additional appenders of this type for each of the FSC/PLC engineers notebooks.
             They can then monitor what's going on in realtime.

             Please notice to increase the "localPort" property for each additional UDP appender.
        -->
        <appender name="UDPLoggingOnLocalMachine" type="log4net.Appender.UdpAppender">
            <!-- Local Port has to be adjusted (eg. +1) for each additional UDP appender... -->
            <localPort value="8090"/>
            <!-- Where to send the UDPs to... -->
            <remoteAddress value="127.0.0.1"/>
            <!-- To which port should the UDPs be sent? (Keep this value all the time) -->
            <remotePort value="8080"/>
            <!-- Include full class name information  -->
            <locationInfo value="true"/>
            <layout type="log4net.Layout.XmlLayoutSchemaLog4j">
                <conversionPattern value="%-5level %logger [%property{Method}] - %message%newline"/>
            </layout>
        </appender>


        <!--
             Example Log4Net rolling file appender configuration which will only log
             data coming in via TCP/IP using the connection named "FSC_01" ...
             It will only log incoming and outgoing data packets.
             PLC and FSC engineer's delight...
        -->

        <appender name="FSC_01" type="log4net.Appender.RollingFileAppender">
            <param name="File" value="..\Log\FSCLOG.LOG"/>
            <param name="AppendToFile" value="true"/>
            <rollingStyle value="Size"/>
            <maximumFileSize value="4MB"/>
            <staticLogFileName value="true"/>
            <countDirection value="1"/>
            <maxSizeRollBackups value="99"/>
            <lockingModel type="log4net.Appender.FileAppender+MinimalLock"/>

            <!-- We only want to log date and time as well as the logging message -->

            <layout type="log4net.Layout.PatternLayout">
                <param name="ConversionPattern" value="%date %message%newline"/>
                <param name="XConversionPattern" value="%d [%t] %-5p %c %m%n"/>
            </layout>

            <!-- Example: Allow only messages starting with '>P' (incoming packet) or '<' (outgoing telegram)
                 coming from connection name FSC_01 -->
            <filter type="VI.MFC.Logging.IncomingOutgoingDataOnlyFilter">
                <threadNameContains value="FSC_01"/>
            </filter>
        </appender>

        <!-- Example of an error file appender logging only log outputs of the
             ERROR level...

        <appender name="ErrorFileAppender" type="log4net.Appender.RollingFileAppender">
            <param name="File" value="..\Log\MFCERROR.LOG"/>
            <param name="AppendToFile" value="true"/>
            <rollingStyle value="Size"/>
            <maximumFileSize value="4MB"/>
            <staticLogFileName value="true"/>
            <maxSizeRollBackups value="99"/>
            <lockingModel type="log4net.Appender.FileAppender+ExclusiveLock" />
            <layout type="log4net.Layout.PatternLayout">
                <param name="ConversionPattern" value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline"/>
                <param name="XConversionPattern" value="%d [%t] %-5p %c %m%n"/>
            </layout>
            <filter type="log4net.Filter.LevelRangeFilter">
                <levelMin value="ERROR" />
                <levelMax value="FATAL" />
            </filter>
        </appender> -->

        <!-- Additional example Log4Net rolling file appender configuration which will only log
             data having to do with a thread named "PLC 1". This is to log PLC communication
             in a seperate file/directory.

        <appender name="PLC_01" type="log4net.Appender.RollingFileAppender">
            <param name="File" value="..\Log\PLCLOG.LOG"/>
            <param name="AppendToFile" value="true"/>
            <rollingStyle value="Size"/>
            <maximumFileSize value="4MB"/>
            <staticLogFileName value="true"/>
            <maxSizeRollBackups value="99"/>
            <lockingModel type="log4net.Appender.FileAppender+MinimalLock"/>
            <layout type="log4net.Layout.PatternLayout">
                <param name="ConversionPattern" value="%date %message%newline"/>
                <param name="XConversionPattern" value="%d [%t] %-5p %c %m%n"/>
            </layout>
            <filter type="VI.MFC.Logging.ThreadFilter">
                <threadNameContains value="PLC 1"/>
            </filter>
        </appender> -->


        <!-- Additional example Log4Net rolling file appender configuration which will only log
         data having to do with a receiver/sender named "B01G01".

        <appender name="BEEWEN_AISLE_1" type="log4net.Appender.RollingFileAppender">
            <param name="File" value="BEEWEN_AISLE1.LOG" />
            <param name="AppendToFile" value="true" />
            <rollingStyle value="Size" />
            <maximumFileSize value="5024KB"/>
            <staticLogFileName value="true" />
            <maxSizeRollBackups value="3"/>
            <lockingModel type="log4net.Appender.FileAppender+MinimalLock" />
            <layout type="log4net.Layout.PatternLayout">
                <param name ="ConversionPattern" value="%date %message%newline" />
                <param name="XConversionPattern" value="%d %m%n" />
            </layout>
            <filter type="log4net.Filter.StringMatchFilter">
                <stringToMatch value="B01G01" />
            </filter>
            <filter type="log4net.Filter.DenyAllFilter" />
        </appender>  -->


        <!-- What follows here are additional, optional Log4Net appender which are listed here
             just as an example of what's possible. You can delete the following section in
             case you don't need it

        <appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
            <layout type="log4net.Layout.PatternLayout">
                <param name="Header" value="[Header]&#13;&#10;"/>
                <param name="Footer" value="[Footer]&#13;&#10;"/>
                <param name="ConversionPattern" value="%d [%t] %-5p %c %m%n"/>
            </layout>
        </appender>

        <appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender,log4net">
            <mapping>
                <level value="ERROR"/>
                <foreColor value="White"/>
                <backColor value="Red"/>
            </mapping>
            <mapping>
                <level value="DEBUG"/>
                <foreColor value="White"/>
            </mapping>
            <mapping>
                <level value="INFO"/>
                <foreColor value="Green"/>
            </mapping>

            <layout type="log4net.Layout.PatternLayout">
                <param name="ConversionPattern" value="%d [%t] %-5p %c - %m%n"/>
            </layout>
        </appender>

        <appender name="SmtpAppender" type="MySmtpClientSmtpAppender">
            <to value="berndk@lsg.vanderlande.com"/>
            <from value="berndk@spbk.de"/>
            <subject value="LOG4NET report"/>
            <smtpHost value="smtp.x.com"/>
            <username value="admin"/>
            <password value="x"/>
            <bufferSize value="256"/>
            <lossy value="true"/>
            <evaluator type="log4net.spi.LevelEvaluator">
                <threshold value="ERROR"/>
            </evaluator>
            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%-5p %d [ThreadId: %t] Class:%c{1} Method:%M %nMESSAGE:%n%m%n%n"/>
            </layout>
        </appender>

        <- End of additional Log4Net appender list. -->
        <appender name="BPIPLCAppender" type="log4net.Appender.RollingFileAppender">
            <param name="File" value="..\Log\BPI\VISION.MFC.PLC.LOG"/>
            <param name="Threshold" value="All"/>
            <param name="AppendToFile" value="true"/>
            <rollingStyle value="Composite"/>
            <datePattern value=".yyyyMMdd_hh"/>
            <maximumFileSize value="5MB"/>
            <staticLogFileName value="true"/>
            <maxSizeRollBackups value="10"/>
            <countDirection value="1"/>
            <lockingModel type="log4net.Appender.FileAppender+ExclusiveLock"/>
            <reconnectonerror value="true"/>
            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%message%newline"/>
            </layout>
        </appender>

        <appender name="BPIFSCAppender" type="log4net.Appender.RollingFileAppender">
            <param name="File" value="..\Log\BPI\VISION.MFC.FSC.LOG"/>
            <param name="Threshold" value="All"/>
            <param name="AppendToFile" value="true"/>
            <rollingStyle value="Composite"/>
            <datePattern value=".yyyyMMdd_hh"/>
            <maximumFileSize value="5MB"/>
            <staticLogFileName value="true"/>
            <maxSizeRollBackups value="10"/>
            <countDirection value="1"/>
            <lockingModel type="log4net.Appender.FileAppender+ExclusiveLock"/>
            <reconnectonerror value="true"/>
            <layout type="log4net.Layout.PatternLayout">
                <conversionPattern value="%message%newline"/>
            </layout>
        </appender>


        <!-- Log4Net root property. This is where to configure which of the above appenders 
             will definitely be used (main switch) and which level of logging should be used. -->

        <renderer renderingClass="VI.MFC.Logging.ViRenderer, MFCLib" renderedClass="System.Object"/>

        <logger name="BPIPLC" additivity="false">
            <level value="INFO"/>
            <appender-ref ref="BPIPLCAppender"/>
        </logger>
        <logger name="BPIFSC" additivity="false">
            <level value="INFO"/>
            <appender-ref ref="BPIFSCAppender"/>
        </logger>

        <logger name="NHibernate">
            <level value="WARN"/>
        </logger>

        <logger name="NHibernate.SQL">
            <level value="WARN"/>
        </logger>
        <root>
            <!-- Level of information being logged (DEBUG,INFO,WARN,ERROR,FATAL) in ascending prio -->
            <level value="INFO"/>
            <!-- Only the appender references listed here will be used at all -->
            <appender-ref ref="AppenderForFRS"/>
            <appender-ref ref="UDPLoggingOnLocalMachine"/>

            <!-- Uncomment one or more of the following lines, if required. 
            <appender-ref ref="FSC_01"/>
            <appender-ref ref="PLC_01"/>
            <appender-ref ref="BEEWEN_AISLE_1"/>
            <appender-ref ref="ErrorFileAppender"/>
            <appender-ref ref="ConsoleAppender" />
            <appender-ref ref="SmtpAppender" />
            <appender-ref ref="ColoredConsoleAppender" />
            -->

        </root>
    </log4net>

    <startup>
        <!-- We do need at least .NET V4 -->
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.6"/>
    </startup>
    <system.data>
        <DbProviderFactories>
            <remove invariant="Oracle.ManagedDataAccess.Client"/>
            <add name="ODP.NET, Managed Driver" invariant="Oracle.ManagedDataAccess.Client" description="Oracle Data Provider for .NET, Managed Driver" type="Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.121.2.0, Culture=neutral, PublicKeyToken=89b483f429c47342"/>
        </DbProviderFactories>
    </system.data>
    <oracle.manageddataaccess.client>
        <version number="*">
            <dataSources>
                <dataSource alias="SampleDataSource" descriptor="(DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORCL))) "/>
            </dataSources>
        </version>
    </oracle.manageddataaccess.client>
  <connectionStrings>
    <add name="local" connectionString="Data Source=.;user id=sa;pwd=!@#123qwe; Initial Catalog=SNTON; Integrated Security=false;" providerName="SqlServer"/>
    <!--Server=.;User Id=sa;Password=123;Database=SNTON;-->
    <!--Data Source=192.168.120.227;user id=sa;pwd=!@#123qwe; Initial Catalog=SNTON; Integrated Security=false;-->
    <!--Data Source=.;user id=sa;pwd=!@#123qwe; Initial Catalog=SNTON; Integrated Security=false;-->
    <!--Server=192.168.120.227;User Id=sa;Password=!@#123qwe;Database=SNTON;-->
  </connectionStrings>
</configuration>
